cmake_minimum_required(VERSION 3.10)
project(skeddy)
set(CMAKE_BUILD_TYPE Release)

# Makefile target to remove files generated by cmake
add_custom_target("cleanall"
  "rm" "-rf" 
  "CMakeCache.txt" 
  "CMakeFiles"
  "Makefile" 
  "cmake_install.cmake"
  "compile_commands.json")

# 3rd party libraries
find_package(fmt REQUIRED)
find_package(spdlog REQUIRED)

find_package(ortools REQUIRED CONFIG)

# Source files
include_directories(${PROJECT_SOURCE_DIR}/include)
include_directories(${PROJECT_SOURCE_DIR}/or-tools/include)
file(GLOB sources ${PROJECT_SOURCE_DIR}/src/*.cpp)
file(GLOB headers ${PROJECT_SOURCE_DIR}/include/*.hpp)

# Compiler settings
## Warnings
SET(WARNING_FLAGS 
  "-Wall \
  -Wextra \
  -Wcast-align \
  -Wmissing-include-dirs \
  -Winvalid-pch \
  -Wformat=2 \
  -Wmissing-format-attribute \
  -Wformat-nonliteral \
  -Wno-deprecated-declarations \
  -Wno-sign-compare \
  -Werror"
)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${WARNING_FLAGS}")

# Enable Address Sanitizer and UB Sanitizer for debug builds
SET(ASAN_FLAGS "-fsanitize=address -fno-optimize-sibling-calls -fsanitize-address-use-after-scope -fno-omit-frame-pointer")
SET(UBSAN_FLAGS "-fsanitize=undefined")

SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${ASAN_FLAGS} ${UBSAN_FLAGS}")
SET(CMAKE_LINKER_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${ASAN_FLAGS} ${UBSAN_FLAGS}")

## Set C++ standard to C++23
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Output compile commands for use with clangd lsp
SET(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Define the executable and libraries to be linked
add_executable(skeddy ${sources} ${headers})
target_link_libraries(skeddy fmt::fmt spdlog::spdlog ortools::ortools)
